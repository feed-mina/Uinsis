--------------------------------------------
옵션
체크 - 오래된 빌드 삭제
Strategy - Log Rotation
빌드 이력유지기간(일): 공란
보관할 최대갯수: 3
 
String Parameter
> 매개변수명 : BRANCH_NAME
> Default value develop
> 설명없음

pipeline
> Definition: pipeline script
> Script
> 체크: use groovy sandbox

--------------------------------------------

node{
    def mvnHome
    def artifactId
    def version
    def jar
    def imageName
    def i = 0
    def ns
    def node
    def kube
    def kubeUrl
    def deploy
    def ns_name = ['ns-inc1','ns-inc2','ns-taj','ns-pus']

    stage('checkout'){
        checkout([$class: 'GitSCM', branches: [[name: "*/$BRANCH_NAME"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '68ac590f-b634-41c6-8888-1f19d529a812', url: 'http://172.24.3.9:8001/phs/oc-chat.git']]])
    }

    ns_name.each() { edu ->
    i = i+1
											 
    //for(i=1; i<5; i++) {
        //ns = "ns-edu0${i}"
        ns = edu
        //node = "edu0${i}"
        imageName = "oc-chat-edu0${i}-$BUILD_NUMBER:release"


        if(i<3) {
		  node = "nks01-np"
          kube = "stg-nks01-kube"
          kubeUrl = "https://db8b230a-5ab0-446e-b542-cfaa2dc50b87.kr.vnks.ntruss.com"
        } else {
		  node = "nks02-np"
          kube = "stg-nks02-kube"
          kubeUrl = "https://ee835c78-d050-41ef-8a97-bf98094ee59e.kr.vnks.ntruss.com"
        }

        echo "${node}"

        stage('deploy '+ns) {
          withAWS(region: 'kr-standard', credentials: 'ncp-credentials', endpointUrl: 'https://kr.object.ncloudstorage.com') {
            s3Download(file: 'node-chat.Dockerfile', bucket: 'ebs-oc-stg-contents-bucket', path: 'dockerfiles/node-chat.Dockerfile', force:true)
            s3Download(file: 'node-chat-k8s.yaml', bucket: 'ebs-oc-stg-contents-bucket', path: 'manifests/v2/node-chat-k8s.yaml', force:true)
            s3Download(file: 'package.json', bucket: 'ebs-oc-stg-contents-bucket', path: 'chat-config/package_' + ns + '.json', force:true)
          }
          sh "docker image build -f node-chat.Dockerfile --build-arg SERVER_ENV=${node} -t ${imageName} ."
          sh "docker login -u RQKEKsV39a7yQVy17bd3 -p yesG7Hu5jlWSuV7fBHhvpl13UVg5wlKfpUdP2muA ebs-oc-dev-registry.kr.ncr.ntruss.com "
          sh "docker tag ${imageName} e89969vf.kr.private-ncr.ntruss.com/" + imageName
    
          bfrSize = sh "docker image inspect ${imageName} --format '{{.Size}}'"
          aftSize = 0
          iter = 0
          while (bfrSize != aftSize) {
                pushImage('docker push e89969vf.kr.private-ncr.ntruss.com/' + imageName, 0)
                aftSize = sh "docker image inspect e89969vf.kr.private-ncr.ntruss.com/$imageName --format '{{.Size}}'"
                if(iter++ > 10)
                    break;
          }
          
          //kubenetes apply
          def script = "; envsubst < node-chat-k8s.yaml > deployment.yaml"
          sh 'export NAMESPACE='+ ns + ' NODE_NAME=oc-stg-' + node + ' APP_NAME=node-chat IMAGE=e89969vf.kr.private-ncr.ntruss.com/' + imageName + ' ' + script
          withKubeConfig([credentialsId: "${kube}", serverUrl: "${kubeUrl}",]) 
          {
            sh "kubectl apply -f deployment.yaml -n ${ns}"
          }          
        }
    }
}

void pushImage(exec, iter){
    try {
        sh exec
    } catch (exception) {
        if (iter < 10)
            pushImage(exec, ++iter)
    }
}

