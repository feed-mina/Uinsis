------------------------
체크 - 이 빌드는 매개변수가 있습니다.
String parameter
매개변수명: BRANCH_NAME
Default Value: release

pipeline
definition: pipeline script
script
체크 - use groovy sandbox
------------------------

node{
    def mvnHome
    def artifactId
    def version
    def jar
    def imageName
    def ns
    def kube
    def kubeUrl

    environment {
        registry = "heavyflood/oc-auth"
        registryCredential = 'DockerHub'
    }
    //0501
    // stage('checkout'){
    //     checkout([$class: 'GitSCM', branches: [[name: "$BRANCH_NAME"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '68ac590f-b634-41c6-8888-1f19d529a812', url: 'http://172.24.3.9:8001/codesholic/oc-auth.git']]])
    // }
    
    stage('checkparam') {
        if ("$BRANCH_NAME" == "master") {
        } else {
            echo "branch name must be 'master'"
            exit
        }
    }
    
    stage('checkout'){
        checkout([$class: 'GitSCM', branches: [[name: "*/$BRANCH_NAME"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '68ac590f-b634-41c6-8888-1f19d529a812', url: 'http://172.24.3.9:8001/codesholic/oc-auth.git']]])
    }
    stage('Initialize') {
        mvnHome = tool 'M3'
        // imageName = 'oc-auth-$BUILD_NUMBER:release'
        // echo imageName
    }
    stage('build'){
        sh "'${mvnHome}/bin/mvn' -DskipTests clean package -DfinalName=oc-auth"
    }
    stage('archieve') {
        parallel(
            "Archive Artifacts" : {
                archiveArtifacts artifacts: '**/target/auth-0.0.1-SNAPSHOT.jar',
                fingerprint: true
            },
            "Docker ImagePush": {
                sh 'mv target/auth-0.0.1-SNAPSHOT.jar ./auth-0.0.1-SNAPSHOT.jar'
                withAWS(region: 'kr-standard', credentials: 'ncp-credentials', endpointUrl: 'https://kr.object.ncloudstorage.com') {
                    s3Download(file: 'oc-auth.Dockerfile', bucket: 'ebs-oc-prd-contents-bucket', path: 'dockerfiles/oc-auth.Dockerfile', force:true)
                    s3Download(file: 'oc-auth-k8s.yaml', bucket: 'ebs-oc-prd-contents-bucket', path: 'manifests/v2/oc-auth-k8s.yaml', force:true)
                    s3Download(file: 'oc-auth.yml', bucket: 'ebs-oc-prd-contents-bucket', path: 'configfiles/oc-auth.yml', force:true)
                    s3Download(file: 'whatap.agent-2.0_29.jar', bucket: 'ebs-oc-prd-contents-bucket', path: 'whatapfiles/v2/whatap.agent-2.0_29.jar', force:true)
                    s3Download(file: 'paramkey.txt', bucket: 'ebs-oc-stg-contents-bucket', path: 'whatapfiles/v2/paramkey.txt', force:true)
                    s3Download(file: 'CustomPool.x', bucket: 'ebs-oc-stg-contents-bucket', path: 'whatapfiles/v2/CustomPool.x', force:true)
                }
                // sh 'docker image build -f oc-auth.Dockerfile --build-arg SERVER_ENV=prd -t app .'
                // sh 'docker login -u RQKEKsV39a7yQVy17bd3 -p yesG7Hu5jlWSuV7fBHhvpl13UVg5wlKfpUdP2muA l4msm4ug.kr.private-ncr.ntruss.com'
                // sh 'docker tag app l4msm4ug.kr.private-ncr.ntruss.com/' + imageName
                // sh 'docker push l4msm4ug.kr.private-ncr.ntruss.com/' + imageName
            }
        )
    }

    stage('kube NKS01') {
      kube = "prd-nks01-kube"
      kubeUrl = "https://c5e8b325-f5da-42a6-ad63-270f946a2cb8.kr.vnks.ntruss.com"
      def script = "; envsubst < oc-auth-k8s.yaml > deployment.yaml"
      imageName = "oc-auth-nks01-$BUILD_NUMBER:release"
      
      //whatap.conf
      withAWS(region: 'kr-standard', credentials: 'ncp-credentials', endpointUrl: 'https://kr.object.ncloudstorage.com') {
          s3Download(file: 'whatap.conf', bucket: 'ebs-oc-prd-contents-bucket', path: "whatapfiles/v2/nks01/ns-auth/whatap.conf", force:true)
      }
      sh "docker image build -f oc-auth.Dockerfile --build-arg SERVER_ENV=prd -t oc-auth-nks01-$BUILD_NUMBER ."
      sh 'docker login -u RQKEKsV39a7yQVy17bd3 -p yesG7Hu5jlWSuV7fBHhvpl13UVg5wlKfpUdP2muA l4msm4ug.kr.private-ncr.ntruss.com'
      sh "docker tag oc-auth-nks01-$BUILD_NUMBER l4msm4ug.kr.private-ncr.ntruss.com/" + imageName
      sh 'docker push l4msm4ug.kr.private-ncr.ntruss.com/' + imageName
      sh "export NODE_NAME=oc-prd-nks01-nauth NAMESPACE=ns-auth APP_NAME=oc-auth IMAGE=l4msm4ug.kr.private-ncr.ntruss.com/" + imageName + ' ' + script
      withKubeConfig([credentialsId: "${kube}", serverUrl: "${kubeUrl}", ]) {
        sh "kubectl apply -f deployment.yaml"
      }
    }

    stage('kube NKS02') {
      kube = "prd-nks02-kube"
      kubeUrl = "https://e411dd17-3727-482a-b2cf-5a04b5f10f07.kr.vnks.ntruss.com"
      def script = "; envsubst < oc-auth-k8s.yaml > deployment.yaml"
      imageName = "oc-auth-nks02-$BUILD_NUMBER:release"
      
      //whatap.conf
      withAWS(region: 'kr-standard', credentials: 'ncp-credentials', endpointUrl: 'https://kr.object.ncloudstorage.com') {
          s3Download(file: 'whatap.conf', bucket: 'ebs-oc-prd-contents-bucket', path: "whatapfiles/v2/nks02/ns-auth/whatap.conf", force:true)
      }
      sh "docker image build -f oc-auth.Dockerfile --build-arg SERVER_ENV=prd -t oc-auth-nks02-$BUILD_NUMBER ."
      sh 'docker login -u RQKEKsV39a7yQVy17bd3 -p yesG7Hu5jlWSuV7fBHhvpl13UVg5wlKfpUdP2muA l4msm4ug.kr.private-ncr.ntruss.com'
      sh "docker tag oc-auth-nks02-$BUILD_NUMBER l4msm4ug.kr.private-ncr.ntruss.com/" + imageName
      sh 'docker push l4msm4ug.kr.private-ncr.ntruss.com/' + imageName
      sh "export NODE_NAME=oc-prd-nks02-nauth NAMESPACE=ns-auth APP_NAME=oc-auth IMAGE=l4msm4ug.kr.private-ncr.ntruss.com/" + imageName + ' ' + script
      withKubeConfig([credentialsId: "${kube}", serverUrl: "${kubeUrl}", ]) {
        sh "kubectl apply -f deployment.yaml"
      }
    }
}
