------------------------
체크 - 이 빌드는 매개변수가 있습니다.
String parameter
매개변수명: BRANCH_NAME
Default Value: release

pipeline
definition: pipeline script
script
체크 - use groovy sandbox
------------------------

node {
    
    def appName = "oc-edu"
    def env = "prd"
    
    def nks_edu = ['taj', 'sel1', 'sel2', 'sel3', 'kyg1', 'kyg2', 'kyg3', 'kyg4', 'kyg5', 'inc1', 'inc2', 'pus', 'tae', 'kwj', 'usn', 'kaw', 'ccb', 'ccn', 'clb', 'cln', 'ksb', 'ksn', 'chj', 'sej', 'frc']
    def nks_node = ['nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool', 'nks01-npool']
    
    stage('checkparam') {
        if ("$BRANCH_NAME" == "master") {
        } else {
            echo "branch name must be 'master'"
            exit
        }
    }
    
    stage('checkout') {
        checkout([$class: 'GitSCM', branches: [[name: "*/$BRANCH_NAME"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '68ac590f-b634-41c6-8888-1f19d529a812', url: 'http://172.24.3.9:8001/online-class-admin/api/edu.git']]])
    }
    
    stage('Initialize') {
        mvnHome = tool 'M3'
    }
    
    stage('build artifacts') {
        sh "'${mvnHome}/bin/mvn' -DskipTests clean package -DfinalName=oc-edu"
    }
    
    stage('move artifacts') {
        sh "mv target/oc-edu-0.0.1-SNAPSHOT.jar ./oc-edu-0.0.1-SNAPSHOT.jar"
    }
    
    stage("download contents files") {
        withAWS(region: 'kr-standard', credentials: 'ncp-credentials', endpointUrl: 'https://kr.object.ncloudstorage.com') {
            s3Download(file: "oc-edu.Dockerfile", bucket: "ebs-oc-prd-contents-bucket", path: "dockerfiles/oc-edu.Dockerfile", force:true)
            s3Download(file: "oc-edu-k8s.yaml", bucket: "ebs-oc-prd-contents-bucket", path: "manifests/v2/oc-edu-k8s.yaml", force:true)
        }
    }
    
    stage("parallel docker build") {
        def builds = [:]
        for (e in nks_edu) {
            def edu = e
            builds[edu] = {
                stage("docker build $edu") {
                    docker_builds(edu)
                }
            }
        }
        parallel builds
    }
    
    stage("parallel kube deploy") {
        def deploys = [:]
        for (int i=0; i < nks_edu.size(); i++) {
            def edu = nks_edu[i]
            def node = nks_node[i]
            deploys[nks_edu[i]] = {
                stage("kube deploy $edu") {
                    withKubeConfig([credentialsId: "prd-nks01-kube", serverUrl: "$PRD_NKS01_URL"]){
                        kube_deploys(edu, node)
                    }
                }
            }
        }
        parallel deploys
    }
}


def docker_builds(edu) {
    def db = "prd_db_"+edu
    def imageName = "oc-prd-edu-${edu}-$BUILD_NUMBER:release"
    
    sh "docker image build -f oc-edu.Dockerfile --build-arg SERVER_ENV=prd,${db} -t ${imageName} ."
    sh "docker login -u RQKEKsV39a7yQVy17bd3 -p yesG7Hu5jlWSuV7fBHhvpl13UVg5wlKfpUdP2muA l4msm4ug.kr.private-ncr.ntruss.com"
    sh "docker tag ${imageName} l4msm4ug.kr.private-ncr.ntruss.com/" + imageName
    sh "docker push l4msm4ug.kr.private-ncr.ntruss.com/$imageName"
    
}

def kube_deploys(edu, node) {
    def appName = "oc-edu-"+edu
    def imageName = "oc-prd-edu-${edu}-$BUILD_NUMBER:release"
    
    def script = "; envsubst < oc-edu-k8s.yaml > deployment-${edu}.yaml"
    sh "export NAMESPACE=ns-admin NODE_NAME=oc-prd-${node} APP_NAME=${appName} IMAGE=l4msm4ug.kr.private-ncr.ntruss.com/" + imageName + ' ' + script
    
    // deploy
    sh "kubectl apply -f deployment-${edu}.yaml "
    
}
