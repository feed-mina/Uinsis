--------------------------------------------
옵션
체크 - 오래된 빌드 삭제
Strategy - Log Rotation
빌드 이력유지기간(일): 공란
보관할 최대갯수: 3
 
String Parameter
> 매개변수명 : BRANCH_NAME
> Default value develop
> 설명없음

pipeline
> Definition: pipeline script
> Script
> 체크: use groovy sandbox

--------------------------------------------

node{
    def imageName
    def ns
    def kube
    def kubeUrl
    def i = 0
    def bfrSize
    def aftSize = 0
	def iter = 0
    def configEnv = "stg"
    def staticDir = "front_all/frontend"
    
    def nks01_ns = ["ns-inc1", "ns-inc2"]
    //def nks01_node = ["edu01", "edu02"]
    def nks01_node = ["nks01-np", "nks01-np"]
    def nks02_ns = ["ns-taj", "ns-pus", "ns-inc2"]
    //def nks02_node = ["edu03", "edu04"]
    def nks02_node = ["nks02-np", "nks02-np", "nks02-np"]
    def app_name = "oc-front"

    stage('checkout'){
        checkout([$class: 'GitSCM', branches: [[name: "*/$BRANCH_NAME"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '68ac590f-b634-41c6-8888-1f19d529a812', url: 'http://172.24.3.9:8001/ui-develop/frontend.git']]])
    }
    
    stage('initialize'){
        imageName = "oc-${configEnv}-front-$BUILD_NUMBER:release"
    }
    
    stage('config') {
        parallel(
            "config pull": {
                withAWS(region: 'kr-standard', credentials: 'ncp-credentials', endpointUrl: 'https://kr.object.ncloudstorage.com') {
                    s3Download(file: 'front.Dockerfile', bucket: "ebs-oc-${configEnv}-contents-bucket", path: 'dockerfiles/front-static.Dockerfile', force:true)
                    s3Download(file: 'oc-front-k8s.yaml', bucket: "ebs-oc-${configEnv}-contents-bucket", path: 'manifests/v2/oc-front-k8s.yaml', force:true)
                    s3Download(file: 'nginx.conf', bucket: "ebs-oc-${configEnv}-contents-bucket", path: 'nginxconf/nginx-static.conf', force:true)
                }
            }
        )
    }

    stage('build') {
        nodejs(nodeJSInstallationName: 'nodejs') {
            // sh "rm -rf package-lock.json node_modules"
            sh "npm install"
            sh "cp environments/config.${configEnv}.js environments/config.js"
            sh "npm run build"
        }
    }
    
    stage('upload static files') {
        withAWS(region: 'kr-standard', credentials: "oc-${configEnv}-upload", endpointUrl: 'https://kr.object.ncloudstorage.com') {
            s3Upload(file:"dist" ,bucket: "oc-${configEnv}-static-bucket", path: "${staticDir}/", force:true)
        }
    }
    
    stage('image build') {
        sh "docker image build -f front.Dockerfile  -t ${imageName} ."
        sh "docker login -u RQKEKsV39a7yQVy17bd3 -p yesG7Hu5jlWSuV7fBHhvpl13UVg5wlKfpUdP2muA e89969vf.kr.private-ncr.ntruss.com "
        sh "docker tag ${imageName} e89969vf.kr.private-ncr.ntruss.com/" + imageName
        
        bfrSize = sh "docker image inspect ${imageName} --format '{{.Size}}'"
		aftSize = 0
		iter = 0
		while (bfrSize != aftSize) {
              pushImage("docker push e89969vf.kr.private-ncr.ntruss.com/" + imageName, 0)
              aftSize = sh "docker image inspect e89969vf.kr.private-ncr.ntruss.com/$imageName --format '{{.Size}}'"
              if(iter++ > 10)
                  break;
        }
    }
    
    stage('NKS01') {
        withKubeConfig([credentialsId: "${configEnv}-nks01-kube", serverUrl: "$STG_NKS01_URL"]) {
            apply_from_ns(nks01_ns, nks01_node, app_name, imageName, configEnv)
        }
    }
    
    stage('NKS02') {
        withKubeConfig([credentialsId: "${configEnv}-nks02-kube", serverUrl: "$STG_NKS02_URL"]) {
            apply_from_ns(nks02_ns, nks02_node, app_name, imageName, configEnv)
        }
    }
}

void pushImage(exec, iter){
    try {
        sh exec
    } catch (exception) {
        if (iter < 10)
            pushImage(exec, ++iter)
    }
}

def apply_from_ns(ns, node, appName, imageName, env) {
    ns.eachWithIndex() { namespace, index ->
        sh "export NAMESPACE=${namespace} NODE_NAME=oc-${env}-${node[index]} APP_NAME=${appName} IMAGE=e89969vf.kr.private-ncr.ntruss.com/$imageName ; envsubst < oc-front-k8s.yaml > ${appName}-${namespace}.yaml"
        // sh "cat ${appName}-${namespace}.yaml"
        // sh "kubectl get deployment ${appName} -n ${namespace}"
        sh "kubectl apply -f ${appName}-${namespace}.yaml"
    }
}
